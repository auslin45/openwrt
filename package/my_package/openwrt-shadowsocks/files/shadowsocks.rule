#!/bin/sh

usage() {
	cat <<-EOF
		Usage: ss-rules [options]

		Valid options are:

		    -s <server_host>        hostname or ip of shadowsocks remote server
		    -l <local_port>         port number of shadowsocks local server
		    -c <config_file>        config file of shadowsocks
		    -i <ignore_list_file>   config file of ip ignore list
		    -a <lan_ips>            lan ip of access control, need a prefix to
		                            define access control mode
		    -e <extra_options>      extra options of iptables
		    -o                      apply the rules to the OUTPUT chain
		    -f                      flush the rules
EOF
}

loger() {
	# 1.alert 2.crit 3.err 4.warn 5.notice 6.info 7.debug
	logger -st ss-rules[$$] -p$1 $2
}

resolve_ip() {
	local COUNT=0
	local NS=114.114.114.114

	until ping -c1 $NS >/dev/null 2>&1; do
		if [ "$COUNT" -ge 6 ]; then
			loger 3 "Network is unavailable."
			exit 1
		fi
		COUNT=$(($COUNT + 1))
	done

	nslookup $1 $NS 2>/dev/null | grep -v "$NS" | \
	awk '{ip[NR]=$3}\
		END{for(i=NR;i>0;i--)\
			{if(ip[i] ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/)\
				{print ip[i];break;}}}'
}

flush_r() {
	local IPT=$(iptables-save -t nat)

	if echo "$IPT" | grep -q "^:zone_lan_prerouting"; then
		ROUTING=zone_lan_prerouting
	fi

	eval $(echo "$IPT" | grep "_SS_SPEC_RULE_" | \
		sed -e 's/^-A/iptables -t nat -D/' -e 's/$/;/')
	iptables -t nat -F SS_SPEC_LAN_AC 2>/dev/null && \
	iptables -t nat -X SS_SPEC_LAN_AC
	iptables -t nat -F SS_SPEC_WAN_AC 2>/dev/null && \
	iptables -t nat -X SS_SPEC_WAN_AC

	if command -v ipset >/dev/null; then
		ipset -X shadowsocks 2>/dev/null
		return 0
	fi
	return 1
}

iptab_r() {
	iptables-restore -n <<-EOF
		*nat
		:SS_SPEC_WAN_AC - [0:0]
		$(echo -e "$IPLIST" | \
			sed -e "s/^/-A SS_SPEC_WAN_AC -d /" -e "s/$/ -j RETURN/")
		COMMIT
EOF
	return $?
}

ipset_r() {
	ipset -! -R <<-EOF &&
		create shadowsocks hash:net
		$(echo -e "$IPLIST" | sed -e "s/^/add shadowsocks /")
EOF

	iptables-restore -n <<-EOF
		*nat
		:SS_SPEC_WAN_AC - [0:0]
		-A SS_SPEC_WAN_AC -m set --match-set shadowsocks dst -j RETURN
		COMMIT
EOF
	return $?
}

ac_rule() {
	local S1=RETURN
	local S2=SS_SPEC_WAN_AC

	if echo $LAN_AC_IP | grep -qi "^w"; then
		S1=SS_SPEC_WAN_AC
		S2=RETURN
	fi

	iptables -t nat -A SS_SPEC_WAN_AC -p tcp \
		-j REDIRECT --to-ports $LOCAL_PORT 2>/dev/null || {
	[ -n "$LOCAL_IP" ] && \
	iptables -t nat -A SS_SPEC_WAN_AC -p tcp \
		-j DNAT --to-destination $LOCAL_IP:$LOCAL_PORT
	} || return 1

	iptables-restore -n <<-EOF || return 1
		*nat
		:SS_SPEC_LAN_AC - [0:0]
		$(for i in ${LAN_AC_IP:1}; do
			echo "-A SS_SPEC_LAN_AC -s $i -j $S1"; done)
		-A SS_SPEC_LAN_AC -j $S2
		COMMIT
EOF
	if [ "$OUTPUT" = 1 ]; then
		iptables -t nat -A OUTPUT -p tcp $EXT_ARGS \
			-m comment --comment "_SS_SPEC_RULE_" -j SS_SPEC_WAN_AC
	fi

	if [ -n "$ROUTING" ]; then
		iptables -t nat -A $ROUTING -p tcp $EXT_ARGS \
			-m comment --comment "_SS_SPEC_RULE_" -j SS_SPEC_LAN_AC
	fi
	return $?
}

while getopts ":s:l:c:i:e:a:of" arg; do
	case $arg in
		s)
			SERVER=$OPTARG
			;;
		l)
			LOCAL_PORT=$OPTARG
			;;
		c)
			CONFIG=$OPTARG
			;;
		i)
			IGNORE=$OPTARG
			;;
		e)
			EXT_ARGS=$OPTARG
			;;
		a)
			LAN_AC_IP=$OPTARG
			;;
		o)
			OUTPUT=1
			;;
		f)
			flush_r
			exit 0
			;;
	esac
done

if [ -f "$CONFIG" ]; then
	eval $(awk -F'[,:]' '{
		for (i=1; i<=NF; i++) {
			if ($i ~ /"server"/)
				{printf("server=%s;", $(i+1))}
			if ($i ~ /"local_port"/)
				{printf("local_port=%s;", $(i+1))}
		}
	}' $CONFIG | tr -d '" ')
fi

: ${SERVER:=$server}
: ${LOCAL_PORT:=$local_port}

if [ -z "$SERVER" -o -z "$LOCAL_PORT" ]; then
	usage
	exit 2
fi

if !(echo "$SERVER" | grep -qE "^([0-9]{1,3}\.){3}[0-9]{1,3}$"); then
	loger 5 "The $SERVER is not ip, trying to resolve it."
	SERVER=$(resolve_ip $SERVER)
	if [ -z "$SERVER" ]; then
		loger 3 "Can't resolve the server hostname!"
		exit 1
	fi
	loger 5 "Server IP: $SERVER."
fi

LOCAL_IP=$(uci get network.lan.ipaddr 2>/dev/null)
IPLIST="$SERVER\n0.0.0.0/8\n10.0.0.0/8\n127.0.0.0/8
169.254.0.0/16\n172.16.0.0/12\n192.168.0.0/16\n224.0.0.0/4\n240.0.0.0/4"

if [ -f "$IGNORE" ]; then
	IPLIST="$IPLIST\n$(cat $IGNORE | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}")"
fi

flush_r && ipset_r || iptab_r && ac_rule

exit $?
